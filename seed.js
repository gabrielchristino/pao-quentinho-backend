// Carrega as vari√°veis de ambiente do arquivo .env para o process.env
require('dotenv').config();

/**
 * Gera hor√°rios de fornada din√¢micos para facilitar os testes.
 * A cada 5 minutos, um novo estabelecimento ir√° disparar uma notifica√ß√£o.
 * @returns {string[]} Um array com um √∫nico hor√°rio de fornada.
 */
function generateTestTime(offsetMinutes = 0) {
  const now = new Date();
  // Adiciona o deslocamento e mais 5 minutos (por causa da l√≥gica de notificar 5 min antes)
  now.setMinutes(now.getMinutes() + offsetMinutes + 5);

  // Arredonda para o pr√≥ximo m√∫ltiplo de 5 minutos para sincronizar com o cron
  const minutes = now.getMinutes();
  const roundedMinutes = Math.ceil(minutes / 5) * 5;
  now.setMinutes(roundedMinutes);

  const hours = String(now.getHours()).padStart(2, '0');
  const finalMinutes = String(now.getMinutes()).padStart(2, '0');
  return [`${hours}:${finalMinutes}`];
}

const { Pool } = require('pg');

// Dados iniciais dos estabelecimentos
const estabelecimentosData = [
  {
    id: 1,
    nome: 'Sacol√£o Campo Grande',
    tipo: 'outros',
    horarioAbertura: '07:00',
    horarioFechamento: '21:05',
    proximaFornada: generateTestTime(0), // Notificar√° no pr√≥ximo ciclo de 5 min
    endereco: { rua: 'Av. Nossa Sra. do Sabar√°', numero: '2001', bairro: 'Vila Santana', cidade: 'S√£o Paulo', estado: 'SP', cep: '04685-004', complemento: '' },
    info: 'Mercado de frutas, vegetais e produtos frescos. P√£es e salgados dispon√≠veis na padaria interna.',
    latitude: -23.672309973956033,
    longitude: -46.68705772329827
  },
  {
    id: 2,
    nome: 'OXXO - Sines',
    tipo: 'mercado',
    horarioAbertura: '00:00',
    horarioFechamento: '23:59', // Representando 24 horas
    proximaFornada: generateTestTime(5), // Notificar√° 5 minutos depois do anterior
    endereco: { rua: 'Av. Nossa Sra. do Sabar√°', numero: '1785', bairro: 'Vila Sofia', cidade: 'S√£o Paulo', estado: 'SP', cep: '04685-004' },
    info: 'Mercado de conveni√™ncia com atendimento 24 horas. Lanches, bebidas e produtos de padaria.',
    latitude: -23.670029653701853,
    longitude: -46.68829784147591
  },
  {
    id: 3,
    nome: 'Nova Bar√£o Lanchonete',
    tipo: 'padaria',
    horarioAbertura: '06:00',
    horarioFechamento: '23:00',
    proximaFornada: generateTestTime(10), // Notificar√° 10 minutos depois
    endereco: { rua: 'Av. Nossa Sra. do Sabar√°', numero: '2148', bairro: 'Jardim Campo Grande', cidade: 'S√£o Paulo', estado: 'SP', cep: '04686-002' },
    info: 'Lanchonete e padaria com variedade de salgados, lanches e p√£es.',
    latitude: -23.673485126217443,
    longitude: -46.68660672925216
  },
  {
    id: 4,
    nome: 'P√£o de A√ß√∫car',
    tipo: 'mercado',
    horarioAbertura: '07:00',
    horarioFechamento: '22:00',
    proximaFornada: generateTestTime(15), // Notificar√° 15 minutos depois
    endereco: { rua: 'R. Moacir Sim√µes da Rocha', numero: '105', bairro: 'Vila Sao Pedro', cidade: 'S√£o Paulo', estado: 'SP', cep: '04674-150' },
    info: 'Supermercado completo com padaria, a√ßougue e uma grande variedade de produtos.',
    latitude: -23.665293867593874,
    longitude: -46.68941222071169
  },
  {
    id: 5,
    nome: 'Panificadora Cana√£',
    tipo: 'padaria',
    horarioAbertura: '06:00',
    horarioFechamento: '21:30',
    proximaFornada: generateTestTime(20), // Notificar√° 20 minutos depois
    endereco: { rua: 'R. Ant√¥nio do Campo', numero: '444', bairro: 'Pedreira', cidade: 'S√£o Paulo', estado: 'SP', cep: '04459-000' },
    info: 'Padaria tradicional com p√£es frescos, bolos e salgados.',
    latitude: -23.692614433202063,
    longitude: -46.672676378654344
  },
  {
    id: 6,
    nome: 'Adega Nossa Senhora Lurdes',
    tipo: 'mercado',
    horarioAbertura: '07:00',
    horarioFechamento: '21:00',
    proximaFornada: [],
    endereco: { rua: 'R. Alzira Alves dos Santos', numero: '177', bairro: 'Pedreira', cidade: 'S√£o Paulo', estado: 'SP', cep: '04459-240' },
    info: 'Adega com variedade de bebidas e produtos.',
    latitude: -23.6937513081122,
    longitude: -46.67198067791495
  },
  {
    id: 7,
    nome: 'Sodi√™ Doces S√£o Paulo Interlagos',
    tipo: 'casaDeBolos',
    horarioAbertura: '09:00',
    horarioFechamento: '19:00',
    proximaFornada: [],
    endereco: { rua: 'Av. Interlagos', numero: '3327', bairro: 'Interlagos', cidade: 'S√£o Paulo', estado: 'SP', cep: '04661-200' },
    info: 'A maior variedade de bolos do Brasil. Perfeito para sua festa ou sobremesa.',
    latitude: -23.67937586467009,
    longitude: -46.68581554119652
  },
  {
    id: 8,
    nome: 'Padaria Dona Lena',
    tipo: 'padaria',
    horarioAbertura: '06:00',
    horarioFechamento: '22:00',
    proximaFornada: [],
    endereco: { rua: 'Av. Nossa Sra. do Sabar√°', numero: '3610', bairro: 'Vila Emir', cidade: 'S√£o Paulo', estado: 'SP', cep: '04447-010' },
    info: 'Padaria e confeitaria com p√£es, bolos, doces e salgados.',
    latitude: -23.68507788734944,
    longitude: -46.680465656009815
  },
];

// Configura√ß√£o do Pool de Conex√£o
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

async function seedDatabase() {
  const client = await pool.connect();
  try {
    console.log('Iniciando o processo de seed...');

    // --- 1. Apaga e Recria as Tabelas ---
    // Usar DROP e CREATE garante um ambiente limpo a cada execu√ß√£o.

    console.log('Apagando tabelas antigas (se existirem)...');
    // A ordem de DROP √© a inversa da cria√ß√£o para respeitar as depend√™ncias.
    // O CASCADE cuida de remover as depend√™ncias automaticamente.
    await client.query(`
      DROP TABLE IF EXISTS establishment_subscriptions;
      DROP TABLE IF EXISTS subscriptions;
      DROP TABLE IF EXISTS estabelecimentos;
      DROP TABLE IF EXISTS users;
      DROP TABLE IF EXISTS notification_messages;
    `);

    console.log('Criando novas tabelas...');
    await client.query(`
      CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await client.query(`
      CREATE TABLE estabelecimentos (
        id SERIAL PRIMARY KEY,
        nome VARCHAR(255) NOT NULL,
        tipo VARCHAR(100),
        latitude DOUBLE PRECISION,
        longitude DOUBLE PRECISION,
        details JSONB,
        user_id INTEGER REFERENCES users(id) ON DELETE SET NULL, -- Um estabelecimento pode n√£o ter dono
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await client.query(`
      CREATE TABLE subscriptions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE, -- Se o usu√°rio for deletado, suas inscri√ß√µes tamb√©m s√£o
        subscription_data JSONB NOT NULL,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // Cria um √≠ndice √∫nico na express√£o para garantir que cada endpoint de dispositivo seja √∫nico.
    // Isso √© feito separadamente porque a sintaxe de √≠ndice de express√£o n√£o √© permitida inline no CREATE TABLE.
    await client.query(`
      CREATE UNIQUE INDEX subscriptions_endpoint_unique_idx ON subscriptions ((subscription_data->>'endpoint'));
    `);

    await client.query(`
      CREATE TABLE establishment_subscriptions (
        subscription_id INTEGER NOT NULL REFERENCES subscriptions(id) ON DELETE CASCADE,
        estabelecimento_id INTEGER NOT NULL REFERENCES estabelecimentos(id) ON DELETE CASCADE,
        PRIMARY KEY (subscription_id, estabelecimento_id)
      );
    `);

    await client.query(`
      CREATE TABLE notification_messages (
        id SERIAL PRIMARY KEY,
        message TEXT NOT NULL
      );
    `);

    // --- 2. Populando as Tabelas ---
    const notificationMessages = [
      'Acabou de sair uma nova fornada! Venha conferir!',
      'P√£o quentinho esperando por voc√™! ü•ñ',
      'Sentiu o cheirinho? Fornada nova na √°rea!',
      'N√£o perca! Produtos fresquinhos acabaram de sair do forno.',
    ];

    console.log('Populando a tabela "notification_messages"...');
    for (const msg of notificationMessages) {
      await client.query('INSERT INTO notification_messages (message) VALUES ($1)', [msg]);
    }

    console.log('Populando a tabela "estabelecimentos"...');
    for (const est of estabelecimentosData) {
      // Separa os campos principais dos detalhes para inser√ß√£o nas colunas corretas
      const { id, nome, tipo, latitude, longitude, ...details } = est;
      
      const insertQuery = `
        INSERT INTO estabelecimentos (id, nome, tipo, latitude, longitude, details)
        VALUES ($1, $2, $3, $4, $5, $6)
      `;
      await client.query(insertQuery, [id, nome, tipo, latitude, longitude, details]);
    }

    // --- 3. Sincroniza√ß√£o da Sequ√™ncia de IDs ---
    // Busca o maior ID inserido manualmente
    const maxIdResult = await client.query('SELECT MAX(id) FROM estabelecimentos');
    const maxId = maxIdResult.rows[0].max || 0;

    // Atualiza o contador da sequ√™ncia para o pr√≥ximo valor dispon√≠vel
    console.log(`Sincronizando a sequ√™ncia de IDs para come√ßar ap√≥s ${maxId}...`);
    await client.query(`SELECT setval(pg_get_serial_sequence('estabelecimentos', 'id'), ${maxId})`);

    console.log('‚úÖ Seed conclu√≠do com sucesso!');
  } catch (err) {
    console.error('‚ùå Erro durante o processo de seed:', err.stack);
  } finally {
    // Libera o cliente de volta para o pool
    client.release();
    // Fecha o pool de conex√µes
    await pool.end();
  }
}

seedDatabase();